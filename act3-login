#!/usr/bin/env bash

#TODO: add DoD certificate installation

# Have command error out on any command failure
set -e

bold=$(tput bold)
normal=$(tput sgr0)
yellow=$(tput setaf 3)

echo '
          _____ _______ ____      _      ____   _____ _____ _   _ 
    /\   / ____|__   __|___ \    | |    / __ \ / ____|_   _| \ | |
   /  \ | |       | |    __) |   | |   |_|  | | |  __  | | |  \| |
  / /\ \| |       | |   |__ <    | |   _____|_| | |_ | | | | . ` |
 / ____ \ |____   | |   ___) |   | |___|______| |__| |_| |_| |\  |
/_/    \_\_____|  |_|  |____/    |_____|______|\_____|_____|_| \_|
'

echo -e "${bold}Welcome to the ACT3 Login tool. Let's authenticate you to ACT3's ACE services!${normal}"

# Default XDG directories used in the script
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
elif [[ "$OSTYPE" == "darwin"* ]]; then
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/Library/Caches"}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-"$HOME/Library/Application\ Support"}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"$HOME/Library/Application\ Support"}"
else
  echo "${yellow}WARNING: Unsupported OS${normal}"
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
fi

# Set no auto update for this script
export HOMEBREW_NO_AUTO_UPDATE=1
BREW_BIN=$(brew --prefix)/bin

# Create log file
timestamp=$(date "+%Y-%m-%d_%H-%M-%S")
LOG_FILE="$XDG_CACHE_HOME/act3/login/logs_$timestamp"
mkdir -p "$XDG_CACHE_HOME/act3/login" && touch "$LOG_FILE"
echo -e "\nLogs: $LOG_FILE"

# Log XDG directories
echo "XDG_CACHE_HOME=$XDG_CACHE_HOME" > "$LOG_FILE"
echo "XDG_RUNTIME_DIR=$XDG_RUNTIME_DIR" > "$LOG_FILE"
echo "XDG_CONFIG_HOME=$XDG_CONFIG_HOME" > "$LOG_FILE"

command -v brew >/dev/null 2>&1 || { echo -e "Homebrew not installed, install Homebrew with the following command:\n\n/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nAborting."; exit 1; }

echo "Checking Homebrew installation..."
brew doctor > "$LOG_FILE" 2>&1 || { echo -e "${yellow}WARNING: Detected issues with your Homebrew installation that could cause ACT3 Login to fail. Run \"brew doctor\" to check your system for potential problems.${normal}"; }

if [[ "$OSTYPE" == "linux-gnu" ]] && dpkg -s dev-tools > "$LOG_FILE" 2>&1; then
  echo "Detected an installation of the deprecated ACT3 dev-tools package. This will cause conflicts with installations of Homebrew ACE Tools."
  echo "Run \"apt remove dev-tools\""
fi

# Update in case yq/jq/crane/docker-credential-helper are out of date
echo -e "\nUpdating Homebrew Formula dependencies..."
echo "Running brew update..."
brew update > "$LOG_FILE" 2>&1 || echo "${yellow}Error: brew update failed, you may want to run \"brew doctor\" to check your Homebrew installation${normal}"
echo "Running brew upgrade..."
# all_dependencies="docker-credential-helper yq crane git-credential-libsecret direnv act3-pt kubectl"
brew upgrade > "$LOG_FILE" 2>&1 || echo "${yellow}Error: brew upgrade failed, you may want to run \"brew doctor\" to check your Homebrew installation${normal}"

# Read Personal Access Token
# TODO: link to PAT docs? maybe from dubdubdub
echo -e "\n${bold}Create GitLab Personal Access Token${normal}"
echo -e "1. Navigate to ${bold}https://git.act3-ace.com/-/profile/personal_access_tokens${normal}"
echo "2. Create a GitLab Personal Access Token with \"api\" scope"
echo "3. Enter your GitLab Username and Personal Access Token:"
read -r -p "       Enter Username>" USERNAME
read -s -r -p "       Enter Token>" TOKEN
echo ""

# GITLAB CONTAINER REGISTRY CREDENTIALS
echo -e "\n${bold}Setting up credentials for the ACT3 GitLab Container Registry${normal}"

# Use yq to add credsStore field to ~/.docker/config.json
# Use crane to log in to reg.git.act3-ace.com (crane checks login)
echo -e "Checking for dependencies: docker-credential-helper, yq, crane"
brew list docker-credential-helper > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling docker-credential-helper"; brew install docker-credential-helper > "$LOG_FILE"; }
brew list yq > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling yq"; brew install yq > "$LOG_FILE"; }
brew list crane > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling crane"; brew install crane > "$LOG_FILE"; }

CREDS_STORE="secretservice"
if [[ "$OSTYPE" == "darwin"* ]]; then
	CREDS_STORE="osxkeychain"
fi

echo "Configuring registry authentication to use \"$CREDS_STORE\" ($HOME/.docker/config.json)"
mkdir -p "$HOME/.docker"
touch -a "$HOME/.docker/config.json" # -a tells touch to only change the "access" and "change" times
"$BREW_BIN"/yq e -i -o=json ".credsStore = \"$CREDS_STORE\"" "$HOME/.docker/config.json"
"$BREW_BIN"/yq e -i -o=json ".credHelpers.\"reg.git.act3-ace.com\" = \"$CREDS_STORE\"" "$HOME/.docker/config.json"

echo "Logging into the ACT3 GitLab Container Registry with Crane (reg.git.act3-ace.com)"
printf '%s\n' "$TOKEN" | "$BREW_BIN"/crane auth login reg.git.act3-ace.com -u "$USERNAME" --password-stdin > "$LOG_FILE"

# GIT CREDENTIAL STORAGE SETUP
echo -e "\n${bold}Setting up Git credentials for the ACT3 GitLab instance${normal}"

# https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  echo "Checking for dependencies: git-credential-libsecret"
	brew list git-credential-libsecret > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling git-credential-libsecret"; brew install git-credential-libsecret > "$LOG_FILE"; }

  echo "Configuring Git to use credential helper \"libsecret\""
  git config --global credential.helper "libsecret" > "$LOG_FILE"

  echo "Storing credentials for the ACT3 GitLab Instance (git.act3-ace.com)"
  printf 'protocol=https\nhost=git.act3-ace.com\nusername=%s\npassword=%s\n' "$USERNAME" "$TOKEN" | "$BREW_BIN"/git-credential-libsecret store > "$LOG_FILE"
elif [[ "$OSTYPE" == "darwin"* ]]; then
	# I think MacOS comes with this pre-installed or it's part of git?
  echo "Configuring Git to use credential helper \"osxkeychain\""
  git config --global credential.helper "osxkeychain" > "$LOG_FILE"

  echo "Storing credentials for the ACT3 GitLab Instance (git.act3-ace.com)"
  printf 'protocol=https\nhost=git.act3-ace.com\nusername=%s\npassword=%s\n' "$USERNAME" "$TOKEN" | git credential-osxkeychain store > "$LOG_FILE"

  [[ $(command -v git) == "/usr/bin/git" ]] || echo "${yellow}WARNING: Your system is using a non-standard installation of git. Use \"/usr/bin/git\" to take advantage of macOS keychain secure credential storage. If you have installed git via Homebrew, run \"brew uninstall git\"${normal}"
fi

# ACE TOOLS HOMEBREW TAP
echo -e "\n${bold}NETRC Creation (for Golang development)${normal}"

create_netrc () {
echo "Checking for dependencies: direnv"
brew list direnv > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling direnv"; brew install direnv > "$LOG_FILE"; }

mkdir -p "$XDG_CONFIG_HOME/direnv"
touch -a "$XDG_CONFIG_HOME/direnv/direnvrc"

echo "export NETRC=\"$XDG_RUNTIME_DIR\"/netrc
cat <<EOF > \"\$NETRC\"
machine git.act3-ace.com
	login $USERNAME
	password \$(secret-tool lookup server git.act3-ace.com)
EOF
chmod 600 \"$NETRC\"
" > "$XDG_CONFIG_HOME/direnv/direnvrc"

echo "Configured NETRC to use secure credential storage. (\"$XDG_CONFIG_HOME/direnv/direnvrc\")"
echo "To use the NETRC credentials for a GoLang project, there are two additional steps:"
echo "1. Create a .envrc file in the project directory (can be empty)."
echo "2. Run \"direnv allow\" in the project's directory."
echo "Add \".envrc\" to your global .gitignore to avoid committing the file."
}

read -r -p "Do you wish to set up a .netrc file? (y/n)>" yn
case $yn in
	[Yy]* ) create_netrc;;
	* ) echo "Skipping NETRC creation";;
esac

# ACE TOOLS HOMEBREW TAP
echo -e "\n${bold}Setting up the ACE Tools Homebrew Tap${normal}"

# Tap act3/ace-tools if not already tapped
echo "Checking for the act3/ace-tools Homebrew Tap... "
[[ $(brew tap) =~ "act3/ace-tools" ]] || { echo -e "Adding the act3/ace-tools Homebrew Tap"; brew tap act3/ace-tools https://git.act3-ace.com/ace/homebrew-ace-tools.git > "$LOG_FILE"; }
echo -e "act3/ace-tools tap added, check available formulas with \"brew search act3/ace-tools\""

echo "Upgrading Homebrew Formulae"
brew update > "$LOG_FILE" 2>&1 || echo "${yellow}Error: brew update failed, you may want to run \"brew doctor\" to check your Homebrew installation${normal}"
brew upgrade > "$LOG_FILE" 2>&1 || echo "${yellow}Error: brew upgrade failed, you may want to run \"brew doctor\" to check your Homebrew installation${normal}"

# GITLAB API CREDENTIALS FOR PROJECT TOOL
echo -e "\n${bold}Setting up GitLab API Credentials for ACT3 Project Tool (act3-pt)${normal}"

# Install act3-pt and log in to git.act3-ace.com
echo "Checking for act3-pt... "
brew list act3-pt > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling act3-pt"; brew install act3-pt > "$LOG_FILE"; }

echo "Logging in with act3-pt"
printf '%s\n' "$TOKEN" | "$BREW_BIN"/act3-pt login --name act3 --url git.act3-ace.com --token-stdin > "$LOG_FILE"

# TELEMETRY SERVER SETUP FOR ACE-DT
echo -e "\n${bold}Setting up Telemetry Server for ACE Data Tool (ace-dt)${normal}"

echo "Checking for ace-dt config file..."
ACE_DT_CONFIG="${ACE_DT_CONFIG:-$XDG_CONFIG_HOME/ace/dt/config.yaml}"
mkdir -p "$(dirname "$ACE_DT_CONFIG")"
touch -a "$ACE_DT_CONFIG"
if [ -s "$ACE_DT_CONFIG" ]; then
	echo "Leaving existing ace-dt configuration file unchanged"
else 
	echo "Writing ace-dt configuration file with telemetry server configuration"
	cat <<EOF > "$ACE_DT_CONFIG"
# ACE Data Tool Configuration
apiVersion: config.dt.act3-ace.io/v1alpha1
kind: Configuration

# CachePruneMax is the maximum cache size after pruning
# cachePruneMax: 500Mi

# CachePath is the directory where the cache fields are stored
# cachePath:

# CompressionLevel is the level used for compression.  Valid values are min, normal, max
# compressionLevel: normal

# ChunkSize is the maximum size of a chunk used to upload blobs. 0 disables chunking
# chunkSize: 100Mi

# ConcurrentHTTP is the maximum number of HTTP requests that will be in flight at any given time. Must be positive.
# concurrentHTTP: 25

# RegistryAuthFile is the file to use for credentials to an OCI registry.  Defaults to ~/.docker/config.json
# registryAuthFile: ~/.docker/config.json

# Telemetry configuration
telemetry:
- name: lion
  url: https://telemetry.lion.act3-ace.ai
telemetryUserName: $USERNAME
EOF
fi

# ACE HUB USER CONFIGURATION
echo -e "\n${bold}Creating ACE Hub User Configuration file${normal}"

ACE_HUB_USER_FILE="$XDG_RUNTIME_DIR/ace/hub/act3.json"

mkdir -p "$XDG_RUNTIME_DIR/ace/hub"
touch -a "$ACE_HUB_USER_FILE"

mkdir -p "$XDG_CONFIG_HOME/ace/hub"
ACE_HUB_USER_FILE_LINK="$XDG_CONFIG_HOME/ace/hub/act3.json"
ln -s -f "$ACE_HUB_USER_FILE" "$ACE_HUB_USER_FILE_LINK"

echo -e "Creating user configuration file ${bold}\"$ACE_HUB_USER_FILE_LINK\"${normal}"
encoded=$(echo -n "$USERNAME:$TOKEN" | base64)
cat <<EOF > "$ACE_HUB_USER_FILE"
{
	"env": {},
	"envFiles": {
		"NETRC": "machine git.act3-ace.com\n  login $USERNAME\n  password $TOKEN",
		"REGISTRY_AUTH_FILE": "{\n  \"auths\": {\n    \"reg.git.act3-ace.com\": {\n      \"auth\": \"$encoded\"\n    }\n  }\n}",
		"ACE_DT_TELEMETRY_USERNAME": "$USERNAME"
	},
	"ips": {
		"act3": {
			"registry": "reg.git.act3-ace.com",
			"username": "$USERNAME",
			"password": "$TOKEN"
		}
	},
	"userLaunchTemplates": {}
}
EOF
echo "You must import this user configuration file to ACE Hub to use your credentials. The file will be destroyed on next reboot."

# CLUSTER ACCESS CONFIGURATION
echo -e "\n${bold}Setting up ACT3 Kubernetes cluster access${normal}"

echo -e "Checking for dependencies: kubectl, krew, oidc-login"
brew list kubernetes-cli > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling kubectl"; brew install kubernetes-cli > "$LOG_FILE"; }
brew list krew > "$LOG_FILE" 2>&1 || { echo -e "\tInstalling krew"; brew install krew > "$LOG_FILE"; }
command -v kubectl-oidc-login >/dev/null 2>&1 || { echo -e "\tInstalling konfig"; "$BREW_BIN"/kubectl-krew install oidc-login > "$LOG_FILE"; }

# curl the file from wherever it ends up 
CLUSTERCONFIG="$HOME/.kube/act3.yaml"
echo -e "Creating cluster configuration file ${bold}\"$CLUSTERCONFIG\"${normal}"

# Make sure file exists
mkdir -p "$HOME/.kube"
chmod 700 "$HOME/.kube" # permissions for only user read/write
touch -a "$CLUSTERCONFIG"
chmod 700 "$CLUSTERCONFIG" # permissions for only user read/write
[ -f "$HOME/.kube/config" ] && chmod 700 "$HOME/.kube/config"

# Write to it
cat <<EOF > "$CLUSTERCONFIG"
# Cluster config sourced from https://git.act3-ace.com/www/www.git.act3-ace.com/-/blob/master/docs/resources/kubernetes.md
kind: Config
apiVersion: v1
clusters:
- cluster:
    server: https://k8s.ace.act3.ai
  name: lion-public
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlakNDQVIrZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWtNU0l3SUFZRFZRUUREQmx5YTJVeUxYTmwKY25abGNpMWpZVUF4TmpReU56YzJOamMwTUI0WERUSXlNREV5TVRFME5URXhORm9YRFRNeU1ERXhPVEUwTlRFeApORm93SkRFaU1DQUdBMVVFQXd3WmNtdGxNaTF6WlhKMlpYSXRZMkZBTVRZME1qYzNOalkzTkRCWk1CTUdCeXFHClNNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJMRDRDdkRFVHYwL3VVdUJjUlV1MDcvN3RGMTBVTU9TOWlWa1FrekIKSGg1ai9jak4vUThNM2pycTRYVWttR2VhVG9QalhrZjQ0MjNVRzV3cGM5V3NjdFdqUWpCQU1BNEdBMVVkRHdFQgovd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUWxKNy8wY2k2VzBKODJLd2NwCjhqMW96Vk5WampBS0JnZ3Foa2pPUFFRREFnTkpBREJHQWlFQTdXTy9NRXlMYnJ6Z2ZacDRRdkx5RzltSjNrMGkKeDFxRFlWSUNWQnYrbG1vQ0lRRExMN3R4UFA1SDB0bndvVW1JTy8xOEtjVUI3MzZOanh3eDB4WnNPeEYzMWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://lion-ctl.act3-ace.ai:6443
  name: lion
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIrZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWtNU0l3SUFZRFZRUUREQmx5YTJVeUxYTmwKY25abGNpMWpZVUF4TmpjeU56YzROVGcyTUI0WERUSXpNREV3TXpJd05ETXdObG9YRFRNeU1USXpNVEl3TkRNdwpObG93SkRFaU1DQUdBMVVFQXd3WmNtdGxNaTF6WlhKMlpYSXRZMkZBTVRZM01qYzNPRFU0TmpCWk1CTUdCeXFHClNNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJHeUVGN05XVnZUUGt1eHFDREEydlRhZWg4c3crRTZ3V2tCUTFzSysKZzhDSDluVFpIRnUzTm56a3NjOHV5QkhRTnhtZ2JZMGhLY3EyZFJrTjJHbUxBeEtqUWpCQU1BNEdBMVVkRHdFQgovd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUVZIZmViaHhGZmNFUlhWY2dDCmJ0S2ZkSnl1b1RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCQ0FMb3YyRUptZENJdjZHajNKc2Q1aWtYZmNHMXkKWGo0aFlTeGpPVzFSZWdJZ2ZDczVFZU00a1JIcXpYWkxsMG95Z250SitrelhzOGFEaFdSa09GakE0VmM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://meerkat-ctl.act3-ace.ai:6443
  name: meerkat
users:
- name: gitlab-oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://git.act3-ace.com
      - --oidc-client-id=f784af5244e3f5875d932f99a82b0c4147b17fa656e58e0e1acaea3621db2c33
      command: kubectl
      env: null
      provideClusterInfo: false
contexts:
- context:
    cluster: lion-public
    user: gitlab-oidc
  name: lion
- context:
    cluster: meerkat
    user: gitlab-oidc
  name: meerkat
current-context: lion
EOF

echo "Backing up existing configuration to \"$HOME/.kube/config.bak\""
[ -f "$HOME/.kube/config" ] && cp "$HOME/.kube/config" "$HOME/.kube/config.bak-$(date +%s)"
echo "Merging cluster configuration into \"$HOME/.kube/config\"."
# "$BREW_BIN"/kubectl konfig import --save "$CLUSTERCONFIG"
KUBECONFIG=~/.kube/config:"$CLUSTERCONFIG" "$BREW_BIN"/kubectl config view --raw > ~/.kube/config.new && cp ~/.kube/config.new ~/.kube/config

echo "Creating secret in namespace $USERNAME-workspace"
output=$(kubectl create secret docker-registry act3 --docker-server reg.git.act3-ace.com --docker-username "$USERNAME" --docker-password "$TOKEN" -n "$USERNAME-workspace" --context lion 2>&1)
echo "$output"
if [[ "$output" == *"already exists"* ]]; then
  echo "Secret already exists"
elif [[ "$output" == *"error"* ]]; then
  echo "${yellow}WARNING: Could not create secret, you may have to request to be added to \"ace-project\"${normal}"
fi

echo -e "\n${bold}Success!${normal}"
