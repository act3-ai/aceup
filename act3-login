#!/usr/bin/env bash

############################################################
############################################################
# This is the public component of the ACT3 Login Script
# Prerequisites are verified and token entry is requested.
############################################################
############################################################

############################################################
# Global setup
############################################################

# Have command error out on any command failure
set -e

# Initialize finishing tasks
finish_tasks=()

# Curl flags:
# -f, --fail               Fail fast with no output on HTTP errors
# -s, --silent             Silent mode
# -S, --show-error         Show error even when -s is used
# -L, --location           Follow redirects

pre_script="/tmp/act3-login-pre.sh"
curl -fsSL --create-dirs -o "$pre_script" https://raw.githubusercontent.com/act3-ace/aceup/main/utils/pre.sh
# shellcheck source=utils/pre.sh
source "$pre_script" && rm "$pre_script"

############################################################
# Preparation
############################################################

echo "$blue"'
          _____ _______ ____      _      ____   _____ _____ _   _ 
    /\   / ____|__   __|___ \    | |    / __ \ / ____|_   _| \ | |
   /  \ | |       | |    __) |   | |   |_|  | | |  __  | | |  \| |
  / /\ \| |       | |   |__ <    | |   _____|_| | |_ | | | | . ` |
 / ____ \ |____   | |   ___) |   | |___|______| |__| |_| |_| |\  |
/_/    \_\_____|  |_|  |____/    |_____|______|\_____|_____|_| \_|
'"$normal"

echo "${bold}Welcome to the ACT3 Login tool. Let's authenticate you to ACT3's ACE services!${normal}"
echo
create_log_file

############################################################
# Verify Prerequisites                                     #
############################################################

echo
echo "${bold}Checking prerequisites${normal}"

system_check() {
  echo -n "Checking system... "
  if is_wsl; then
    success "Detected Linux running on WSL"
  elif is_linux; then
    success "Detected Linux"
  elif is_macos; then
    success "Detected macOS"
  else
    warning_yellow "Detected unsupported OS \"${OSTYPE}\""
  fi
}

validate_git() {
  echo -n "Checking for Git... "
  if command -v git >/dev/null 2>&1; then
    success "Git is installed"
  else
    failure_red "Git not installed, ACT3 Login requires Git."
    echo
    echo "Install Git by following the instructions for your system:"
    echo
    echo "https://git-scm.com/"
    echo
    abort
  fi
}

validate_homebrew() {
  # FAIL IF HOMEBREW IS NOT INSTALLED
  echo -n "Checking for Homebrew... "
  if command -v brew >/dev/null 2>&1; then
    success "Homebrew is installed"
  else
    failure_red "Homebrew not installed, ACT3 Login requires Homebrew."
    echo
    echo "Install Homebrew with the following command (from https://brew.sh/):"
    echo
    echo "/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    echo
    abort
  fi

  # Check homebrew installation for issues with "brew doctor"
  echo -n "Running \"brew doctor\"... "
  if log_eval brew doctor; then
    success "Passed"
  else
    failure "Failed"
    warning_yellow "WARNING: Running \"brew doctor\" detected issues with your Homebrew installation that could impact ACT3 Login."
    finish_tasks+=("- Fix issues identified by running ${bold}brew doctor${normal}")
  fi

  # Update Homebrew's catalog so the latest verison of dependencies are installed
  echo -n "Running \"brew update\"... "
  # eat "brew update" failure because it could fail for act3/ace-tools tap
  if log_eval brew update; then
    echo "$green_check"
  else
    warning_yellow "Failed"
  fi
}

system_check
validate_git
validate_homebrew

# CHECK IF dev-tools IS INSTALLED AND EXPLAIN HOW TO UNINSTALL
if is_linux && dpkg -s dev-tools >/dev/null 2>&1; then
  warning_yellow "WARNING: The deprecated ACT3 \"dev-tools\" Debian package is installed on your system and will conflict with the ACE Tools Homebrew formula. Remove with \"apt remove dev-tools\""
fi

############################################################
# Token entry                                              #
############################################################

# Output instructions

echo
box_out \
  "${bold}Create a GitLab Personal Access Token${normal}" \
  "1. Navigate to ${bold}https://git.act3-ace.com/-/profile/personal_access_tokens${normal}" \
  "2. Give the token an identifiable name" \
  "3. Check the ${bold}api${normal} box under ${bold}Select scopes${normal} (leave all others unchecked)" \
  "4. Click ${bold}Create personal access token${normal} to create the token" \
  "5. Copy the token to your clipboard from the box labeled ${bold}Your new personal access token${normal}"
echo

echo "${bold}Enter GitLab Personal Access Token:${normal}"
read -s -r -p "Enter Token>" TOKEN
echo

############################################################
# Validate Token Input
############################################################

if [ "$TOKEN" = "" ]; then
  failure_red "Empty input for token."
  echo
  echo "Aborting."
  exit 1
fi

echo
echo "${bold}Validating GitLab Personal Access Token${normal}"

echo -n "Installing curl to request token information... "
brew_install "curl"
echo -n "Installing yq to check response... "
brew_install "yq"
echo -n "Installing timeout for long running commands... "
brew_install "coreutils"

token_valid="true"

if output=$(log_out "$curl" -s --fail-with-body --request GET --header "PRIVATE-TOKEN: ${TOKEN}" \
  "https://git.act3-ace.com/api/v4/personal_access_tokens/self"); then
  token_name=$(echo "$output" | log_out "$(brew --prefix)/bin/yq" '.name')
  success "GitLab has token ${bold}${token_name}${normal}"

  if [[ $(echo "$output" | log_out "$(brew --prefix)/bin/yq" '.revoked') == "true" ]]; then
    failure "Token ${bold}${token_name}${normal} has been revoked"
    token_valid="false"
  fi

  if [[ $(echo "$output" | log_out "$(brew --prefix)/bin/yq" '.active') != "true" ]]; then
    failure "Token ${bold}${token_name}${normal} is inactive"
    token_valid="false"
  fi

  # Check token_valid to confirm token is active and not revoked
  # Done this way to combine a successful revoked/active check into one print
  [ $token_valid = "true" ] && success "Token is active"

  if [[ $(echo "$output" | log_out "$(brew --prefix)/bin/yq" 'contains({"scopes": [ "api" ]})') != "true" ]]; then
    # ex: registry scope triggers registry login
    # ex: repository scope triggers git credential setup
    failure "Token ${bold}${token_name}${normal} does not have required \"api\" scope"
    token_valid="false"
  else
    success "Token has \"api\" scope"
  fi
else
  token_valid="false"

  # Log the response no matter what
  failure "Token not found on GitLab"
  echo
  echo "GitLab responded with:"
  echo "$output"
  echo
  abort
fi

if ! [ $token_valid = "true" ]; then
  failure_red "Token ${bold}${token_name}${normal} failed validation."
  echo
  echo "Check the instructions under ${bold}Create a GitLab Personal Access Token${normal}."
  echo
  echo "Aborting."
  exit 1
fi

############################################################
# Hand off to private script
############################################################

echo
echo "${bold}Handing off to private ACT3 Login script${normal}"

if output=$("$curl" -s --fail-with-body --request GET --header "PRIVATE-TOKEN: ${TOKEN}" \
  "https://git.act3-ace.com/api/v4/projects/1173/repository/files/act3-login-private/raw?ref=master"); then
  success "Downloaded the private script"

  PRIVATE_SCRIPT="$XDG_CACHE_HOME/act3/login/script-private.sh"
  [ -f "$PRIVATE_SCRIPT" ] && rm "$PRIVATE_SCRIPT" # remove existing private script (if exists)
  mkdir -p "$XDG_CACHE_HOME/act3/login" && touch "$PRIVATE_SCRIPT" && chmod +x "$PRIVATE_SCRIPT"
  echo "$output" >"$PRIVATE_SCRIPT"

  echo "Starting the private script... "
  echo
  # no error handling for this, exit as it exits
  "$PRIVATE_SCRIPT" -t "$(printf '%s' "$TOKEN")"
else
  failure "Couldn't download the private script"
  echo
  echo "GitLab responded with:"
  echo "$output"
  echo
  abort
fi
