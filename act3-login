#!/usr/bin/env bash

############################################################
############################################################
# This is the public component of the ACT3 Login Script
# Prerequisites are verified and token entry is requested.
############################################################
############################################################

############################################################
# Global setup                                             #
############################################################

# Have command error out on any command failure
set -e

# Set no auto update for this script
# shellcheck disable=SC2034
HOMEBREW_NO_AUTO_UPDATE=1

# Initialize text formatting shortcuts
bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
green_check="${green}✓${normal}"
yellow_excl="${yellow}!${normal}"
red_x="${red}✗${normal}"

finish_tasks=""

success() {
  echo "${green_check} ${1}"
}

warning() {
  echo "${yellow_excl} ${1}"
}

warning_yellow() {
  echo "${yellow_excl}${yellow} ${1}${normal}"
}

failure() {
  echo "${red_x} ${1}"
}

failure_red() {
  echo "${red_x}${red} ${1}${normal}"
}

check_logs() {
  echo "Troubleshooting: ${bold}https://github.com/act3-ace/aceup/blob/main/docs/troubleshooting-faq.md${normal}"
  echo "Create Support Ticket: ${bold}https://git.act3-ace.com/ace/aceup/-/issues/new?issuable_template=Support%20Ticket${normal}"
}

abort() {
  echo "Aborting."
  echo
  check_logs
  exit 1
}

############################################################
# Preparation                                              #
############################################################

echo "$blue"'
          _____ _______ ____      _      ____   _____ _____ _   _ 
    /\   / ____|__   __|___ \    | |    / __ \ / ____|_   _| \ | |
   /  \ | |       | |    __) |   | |   |_|  | | |  __  | | |  \| |
  / /\ \| |       | |   |__ <    | |   _____|_| | |_ | | | | . ` |
 / ____ \ |____   | |   ___) |   | |___|______| |__| |_| |_| |\  |
/_/    \_\_____|  |_|  |____/    |_____|______|\_____|_____|_| \_|
'"$normal"

echo "${bold}Welcome to the ACT3 Login tool. Let's authenticate you to ACT3's ACE services!${normal}"

############################################################
# Verify Prerequisites                                     #
############################################################

echo
echo "${bold}Checking prerequisites${normal}"

system_check() {
  # Default XDG directories used in the script
  echo -n "Checking OS type... "
  if [[ "$OSTYPE" == "linux-gnu" ]]; then
    echo "${green_check} Detected OS type Linux"
    XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
    # DETERMINE IF TERMINAL IS RUNNING IN WSL
    # https://github.com/microsoft/WSL/issues/423#issuecomment-221627364
    if [ -f /proc/version ] && grep -qi 'microsoft\|wsl' /proc/version; then
      echo "${green_check} Detected Windows Subsystem for Linux (WSL) installation"
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo "${green_check} Detected OS type macOS"
    XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/Library/Caches"}"
  else
    warning_yellow "WARNING: Unsupported OS type \"${OSTYPE}\""
    XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  fi
}

validate_git() {
  echo -n "Checking for Git... "
  if command -v git >/dev/null 2>&1; then
    success "Git is installed"
  else
    failure_red "Git not installed, ACT3 Login requires Git."
    echo
    echo "Install Git by following the instructions for your system:"
    echo
    echo "https://git-scm.com/"
    echo
    abort
  fi
}

validate_homebrew() {
  # FAIL IF HOMEBREW IS NOT INSTALLED
  echo -n "Checking for Homebrew... "
  if command -v brew >/dev/null 2>&1; then
    success "Homebrew is installed"
  else
    failure_red "Homebrew not installed, ACT3 Login requires Homebrew."
    echo
    echo "Install Homebrew with the following command (from https://brew.sh/):"
    echo
    echo "/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    echo
    abort
  fi

  # Check homebrew installation for issues with "brew doctor"
  echo -n "Running \"brew doctor\"... "
  if brew doctor >/dev/null 2>&1; then
    echo "$green_check Passed"
  else
    echo "${red_x} Failed"
    echo "${yellow}! WARNING: Running \"brew doctor\" detected issues with your Homebrew installation that could impact ACT3 Login.${normal}"
    finish_tasks="$finish_tasks- Fix issues identified by running ${bold}brew doctor${normal}\n"
  fi

  # Update Homebrew's catalog so the latest verison of dependencies are installed
  echo -n "Running \"brew update\"... "
  # eat "brew update" failure because it could fail for act3/ace-tools tap
  brew update >/dev/null 2>&1 && echo "$green_check" || echo "${yellow}! Non-fatal error${normal}"
}

system_check
validate_git
validate_homebrew

# CHECK IF dev-tools IS INSTALLED AND EXPLAIN HOW TO UNINSTALL
if [[ "$OSTYPE" == "linux-gnu" ]] && dpkg -s dev-tools >/dev/null 2>&1; then
  echo "${yellow}! WARNING: The deprecated ACT3 \"dev-tools\" Debian package is installed on your system and will conflict with the ACE Tools Homebrew formula. Remove with \"apt remove dev-tools\"${normal}"
fi

# Ensures a Homebrew formula is installed
brew_install() {
  # Check if installed: brew list
  #  If installed, upgrade: brew upgrade
  #  If not installed, install: brew install
  if brew list "$1" >/dev/null 2>&1; then
    success "$1 already installed"
    # Formula is already installed, upgrade it
    brew upgrade "$1" >/dev/null 2>&1 || warning "Could not upgrade ${1}."
  else
    # Formula is not installed, install it
    if output=$(brew install "$1" 2>&1); then
      success "Installed $1"
    else
      failure_red "Failed to install required dependency ${1}."
      echo
      echo "Output of \"brew install ${1}\":"
      echo
      echo "$output"
      echo
      abort # Fail if dependency cannot be met
    fi
  fi
}

############################################################
# Token entry                                              #
############################################################

# Read Personal Access Token
# TODO: link to PAT docs? maybe from dubdubdub
echo
echo "${bold}Create a GitLab Personal Access Token${normal}"
echo "1. Navigate to ${bold}https://git.act3-ace.com/-/profile/personal_access_tokens${normal}"
echo "2. Give the token an identifiable name"
echo "3. Check the ${bold}api${normal} box under ${bold}scopes${normal} (leave all others unchecked)"
echo "4. Click ${bold}Create personal access token${normal} to create the token"
echo "5. Copy the token to your clipboard from the box labeled ${bold}Your new personal access token${normal}"
echo
echo "${bold}Enter GitLab Personal Access Token:${normal}"
read -s -r -p "Enter Token>" TOKEN
echo

############################################################
# Validate Token Input                                     #
############################################################

if [ "$TOKEN" = "" ]; then
  failure_red "Empty input for token."
  echo
  echo "Aborting."
  exit 1
fi

echo
echo "${bold}Validating GitLab Personal Access Token${normal}"

echo -n "Installing curl to request token information... "
brew_install "curl"
echo -n "Installing yq to check response... "
brew_install "yq"

token_valid="true"

if output=$("$(brew --prefix)/opt/curl/bin/curl" -s --fail-with-body --request GET --header "PRIVATE-TOKEN: $TOKEN" \
  "https://git.act3-ace.com/api/v4/personal_access_tokens/self"); then
  token_name=$(echo "$output" | "$(brew --prefix)/bin/yq" '.name')
  success "GitLab has token ${bold}${token_name}${normal}"

  if [[ $(echo "$output" | "$(brew --prefix)/bin/yq" '.revoked') == "true" ]]; then
    failure "Token ${bold}${token_name}${normal} has been revoked"
    token_valid="false"
  fi

  if [[ $(echo "$output" | "$(brew --prefix)/bin/yq" '.active') != "true" ]]; then
    failure "Token ${bold}${token_name}${normal} is inactive"
    token_valid="false"
  fi

  # Check token_valid to confirm token is active and not revoked
  # Done this way to combine a successful revoked/active check into one print
  [ $token_valid = "true" ] && success "Token is active"

  if [[ $(echo "$output" | "$(brew --prefix)/bin/yq" 'contains({"scopes": [ "api" ]})') != "true" ]]; then
    # ex: registry scope triggers registry login
    # ex: repository scope triggers git credential setup
    failure "Token ${bold}${token_name}${normal} does not have required \"api\" scope"
    token_valid="false"
  else
    success "Token has \"api\" scope"
  fi
else
  token_valid="false"

  # Log the response no matter what
  failure "Token not found on GitLab"
  echo
  echo "GitLab responded with:"
  echo "$output"
  echo
  abort
fi

if ! [ $token_valid = "true" ]; then
  failure_red "Token ${bold}${token_name}${normal} failed validation."
  echo
  echo "Check the instructions under ${bold}Create a GitLab Personal Access Token${normal}."
  echo
  echo "Aborting."
  exit 1
fi

############################################################
# Hand off to private script                               #
############################################################

echo
echo "${bold}Handing off to private ACT3 Login script${normal}"

if output=$("$(brew --prefix)/opt/curl/bin/curl" -s --fail-with-body --request GET --header "PRIVATE-TOKEN: $TOKEN" \
  "https://git.act3-ace.com/api/v4/projects/1173/repository/files/act3-login-private/raw?ref=main"); then
  success "Downloaded the private script"

  PRIVATE_SCRIPT="$XDG_CACHE_HOME/act3/login/script_$(date +%s)"
  mkdir -p "$XDG_CACHE_HOME/act3/login" && touch "$PRIVATE_SCRIPT" && chmod +x "$PRIVATE_SCRIPT"
  echo "$output" > "$PRIVATE_SCRIPT"
  
  echo "Starting the private script... "
  echo
  # no error handling for this, exit as it exits
  "$PRIVATE_SCRIPT" -t "$(printf '%s' "$TOKEN")"
else
  failure "Couldn't download the private script"
  echo
  echo "GitLab responded with:"
  echo "$output"
  echo
  abort
fi
