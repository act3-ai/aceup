#!/usr/bin/env bash

# To run: /usr/bin/env bash -c "$(curl -fsSL https://raw.githubusercontent.com/act3-ace/aceup/main/act3-login)"

#TODO: add DoD certificate installation

# Have command error out on any command failure
set -e

# Initialize text formatting shortcuts
bold=$(tput bold)
normal=$(tput sgr0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
green_check="${green}✓${normal}"
yellow_excl="${yellow}!${normal}"
red_x="${red}✗${normal}"

echo '
          _____ _______ ____      _      ____   _____ _____ _   _ 
    /\   / ____|__   __|___ \    | |    / __ \ / ____|_   _| \ | |
   /  \ | |       | |    __) |   | |   |_|  | | |  __  | | |  \| |
  / /\ \| |       | |   |__ <    | |   _____|_| | |_ | | | | . ` |
 / ____ \ |____   | |   ___) |   | |___|______| |__| |_| |_| |\  |
/_/    \_\_____|  |_|  |____/    |_____|______|\_____|_____|_| \_|
'

echo -e "${bold}Welcome to the ACT3 Login tool. Let's authenticate you to ACT3's ACE services!${normal}"

echo -e "\n${bold}Preparing for login${normal}"

# SYSTEM CHECK
# Default XDG directories used in the script
IS_WSL=false
if [[ "$OSTYPE" == "linux-gnu" ]]; then
  echo "${green_check} Detected OS type Linux"
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
  # DETERMINE IF TERMINAL IS RUNNING IN WSL
  # https://github.com/microsoft/WSL/issues/423#issuecomment-221627364
  if [ -f /proc/version ] && grep -qi 'microsoft\|wsl' /proc/version; then
    echo "${green_check} Detected Windows Subsystem for Linux (WSL) installation"
    IS_WSL=true
  fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
  echo "${green_check} Detected OS type macOS"
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/Library/Caches"}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-$HOME/Library/Application Support}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/Library/Application Support}"
else
  echo "${yellow}WARNING: Unsupported OS type \"${OSTYPE}\"${normal}"
  XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
  XDG_RUNTIME_DIR="${XDG_RUNTIME_DIR:-/tmp}"
  XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
fi

# Create log file
timestamp=$(date "+%Y-%m-%d_%H-%M-%S")
LOG_FILE="$XDG_CACHE_HOME/act3/login/logs_$timestamp"
mkdir -p "$XDG_CACHE_HOME/act3/login" && touch "$LOG_FILE"
echo "${green_check} Created log file: $LOG_FILE"

# Log XDG directories
{ echo -e "XDG_CACHE_HOME=$XDG_CACHE_HOME\nXDG_RUNTIME_DIR=$XDG_RUNTIME_DIR\nXDG_CONFIG_HOME=$XDG_CONFIG_HOME"; } >>"$LOG_FILE"

# FAIL IF HOMEBREW IS NOT INSTALLED
if 1 command -v brew >/dev/null 2>&1; then
  echo -e "${red_x}${red} Homebrew not installed, ACT3 Login requires Homebrew.${normal}"
  echo -e "\nInstall Homebrew with the following command:"
  echo -e "\n\t/bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
  echo -e "\nAborting."
  exit 1
fi

# CHECK IF dev-tools IS INSTALLED AND EXPLAIN HOW TO UNINSTALL
if [[ "$OSTYPE" == "linux-gnu" ]] && dpkg -s dev-tools >>"$LOG_FILE" 2>&1; then
  echo -e "${yellow_excl}${yellow} WARNING: The deprecated ACT3 \"dev-tools\" Debian package is installed on your system and will conflict with the ACE Tools Homebrew formula. Remove with \"apt remove dev-tools\"${normal}"
fi

# Set no auto update for this script
export HOMEBREW_NO_AUTO_UPDATE=1
BREW_BIN=$(brew --prefix)/bin

# Ensures a Homebrew formula is installed
brew_install() {
  # Check if installed: brew list
  #  If installed, upgrade: brew upgrade
  #  If not installed, install: brew install
  if brew list "$1" >>"$LOG_FILE" 2>&1; then
    echo -e "\t${green_check} $1 already installed"
    # Formula is already installed, upgrade it
    brew upgrade "$1" >>"$LOG_FILE" 2>&1 || echo -e "\t${red_x} Failed to upgrade ${1}. Check logs"
  # Formula is not installed, install it
  elif brew install "$1" >>"$LOG_FILE"; then
    echo -e "\t${green_check} Installed $1"
  else
    echo -e "\t${red_x} Failed to install ${1}. Check logs"
    exit 1 # Fail if dependency cannot be met
  fi
}

# Upgrades a homebrew dependency if it is installed
brew_upgrade() {
  # Check if installed: brew list
  #  If installed, upgrade: brew upgrade
  #  If not installed, return without error
  if brew list "$1" >>"$LOG_FILE" 2>&1; then
    # Formula is already installed, upgrade it
    if brew upgrade "$1" >>"$LOG_FILE" 2>&1; then
      echo -e "\t${green_check} Upgraded ${1}"
    else
      echo -e "\t${red_x} Failed to upgrade ${1}. Check logs"
    fi
  fi
  # FAILED UPGRADE SHOULD NOT EXIT THE SCRIPT
}

# Check homebrew installation for issues with "brew doctor"
echo "Checking Homebrew installation:"
echo -e "\tRunning \"brew doctor\"..."
if ! brew doctor >>"$LOG_FILE" 2>&1; then
  echo -e "${yellow_excl}${yellow} WARNING: \"brew doctor\" reported issues with your Homebrew installation that could impact ACT3 Login.${normal}"
fi

# Update in case yq/jq/crane/docker-credential-helper are out of date
echo -e "\tRunning \"brew update\"..."
brew update >>"$LOG_FILE" 2>&1 || : # eat "brew update" failure because it could fail for act3/ace-tools tap
echo -e "\tChecking dependencies..."
public_deps=("yq" "crane")
for dep in "${public_deps[@]}"; do
  brew_install "$dep"
done
# if brew upgrade >>"$LOG_FILE" 2>&1; then
#   echo -e "${green_check} Upgraded Homebrew formulae"
# else
#   echo -e "${yellow_excl}${yellow} Warning: \"brew upgrade\" failed${normal}"
# fi

# Read Personal Access Token
# TODO: link to PAT docs? maybe from dubdubdub
echo -e "\n${bold}Create GitLab Personal Access Token${normal}"
echo -e "1. Navigate to ${bold}https://git.act3-ace.com/-/profile/personal_access_tokens${normal}"
echo "2. Create a GitLab Personal Access Token ${bold}with \"api\" scope${normal}"
echo "3. Enter your GitLab Username and Personal Access Token:"
read -r -p "       Enter Username>" USERNAME
read -s -r -p "       Enter Token>" TOKEN
echo ""

# GIT SSH CREDENTIALS
echo -e "\n${bold}Validating GitLab Personal Access Token${normal}"

token_valid="true"

if output=$(curl -s --request GET --header "PRIVATE-TOKEN: $TOKEN" \
  "https://git.act3-ace.com/api/v4/personal_access_tokens/self"); then
  token_name=$(echo "$output" | yq '.name')
  echo "${green_check} GitLab has token \"${token_name}\""

  if [[ $(echo "$output" | yq '.revoked') == "true" ]]; then
    echo "${red_x} Token has been revoked"
    token_valid="false"
  fi

  if [[ $(echo "$output" | yq '.active') != "true" ]]; then
    echo "${red_x} Token is inactive"
    token_valid="false"
  fi

  # Check token_valid to confirm token is active and not revoked
  # Done this way to combine a successful revoked/active check into one print
  [ $token_valid = "true" ] && echo "${green_check} Token is active"

  if [[ $(echo "$output" | yq 'contains({"scopes": [ "api" ]})') != "true" ]]; then
    # TODO: should setup continue for things the token has the correct scope for?
    # ex: registry scope triggers registry login
    # ex: repository scope triggers git credential setup
    echo "${red_x} Token does not have required \"api\" scope"
    token_valid="false"
  else
    echo "${green_check} Token has \"api\" scope"
  fi
else
  echo "${red_x} Token not found on GitLab"
  token_valid="false"

  # Log the response no matter what
  echo -e "Returned:\n$output" >>"$LOG_FILE"

  # Print the response's "message" field if it exists
  if message=$(echo "$output" | yq '.message'); then
    ! [ "$message" = "null" ] && echo -e "\tgit.act3-ace.com responded with: ${message}"
  fi
fi

if ! [ $token_valid = "true" ]; then
  echo "${red_x}${red} Token failed validation, check logs.${normal}"
  echo "Aborting."
  exit 1
fi

# GIT SSH CREDENTIALS
echo -e "\n${bold}Setting up Git SSH credentials for the ACT3 GitLab${normal}"

# back up existing private key file
if [ -f "$HOME/.ssh/act3_ecdsa" ]; then
  backup="$HOME/.ssh/act3_ecdsa.bak-$(date +%s)"
  mv "$HOME/.ssh/act3_ecdsa" "$backup"
  echo "${green_check} Backed up existing private key to $backup"
fi

# back up existing public key file
if [ -f "$HOME/.ssh/act3_ecdsa.pub" ]; then
  backup="$HOME/.ssh/act3_ecdsa.pub.bak-$(date +%s)"
  mv "$HOME/.ssh/act3_ecdsa.pub" "$backup"
  echo "${green_check} Backed up existing public key to $backup"
fi

# Generate SSH Key
ssh_key="$HOME/.ssh/act3_ecdsa"
ssh-keygen -f "$ssh_key" -t ecdsa -b 521 -C "Key for git.act3-ace.com (created by ACT3 Login $timestamp)" -N "" -q
echo "${green_check} Generated SSH key $ssh_key"
#TODO: make a passphrase, use ssh-add to add key to the agent, provide the agent with the passphrase, store the passphrase in the system keychain
# on mac:
# WARNING: The -K and -A flags are deprecated and have been replaced
#  by the --apple-use-keychain and --apple-load-keychain
#  flags, respectively.  To suppress this warning, set the
#  environment variable APPLE_SSH_ADD_BEHAVIOR as described in
#  the ssh-add(1) manual page.

# Add public key to GitLab user
if output=$(curl -s --request POST --header "PRIVATE-TOKEN: ${TOKEN}" \
  --form "title=Key for $(hostname) (created by ACT3 Login ${timestamp})" \
  --form "key=$(cat "$ssh_key.pub")" \
  "https://git.act3-ace.com/api/v4/user/keys"); then
  # Log the response no matter what
  echo "$output" >>"$LOG_FILE"

  echo "${green_check} Added SSH key to GitLab account"
else
  # Log the response no matter what
  echo "$output" >>"$LOG_FILE"

  echo "${red_x} Couldn't add SSH key to GitLab account"

  # Print the response's "message" field if it exists
  message=$(echo "$output" | yq '.message' || echo "null")
  if ! [ "$message" = "null" ]; then
    echo -e "\tgit.act3-ace.com responded with: ${message}"
  fi
fi

# GIT HTTPS CREDENTIALS
echo -e "\n${bold}Setting up Git HTTPS credentials for the ACT3 GitLab${normal}"

# https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
# TODO: check current helper so we don't overwrite someone's valid current helper
# current_helper=$(git config credential.helper)
if [ "$IS_WSL" == true ]; then
  # Warn WSL users that the cache helper is temporary
  echo "${yellow}WARNING: SSH is recommended for Git on WSL. HTTPS credentials will need re-entered every 24 hours.${normal}"

  git config --global credential.helper 'cache --timeout=86400' >>"$LOG_FILE"
  echo "${green_check} Configured Git to use credential helper \"cache\""

  if printf 'protocol=https\nhost=git.act3-ace.com\nusername=%s\npassword=%s\n' "$USERNAME" "$TOKEN" | git credential-cache store >>"$LOG_FILE"; then
    echo "${green_check} Stored Git HTTPS credentials for \"git.act3-ace.com\""
  else
    echo "${yellow_excl} Could not store Git HTTPS credentials"
  fi
elif [[ "$OSTYPE" == "linux-gnu" ]]; then
  # Install git-credential-libsecret
  echo "Installing git-credential-libsecret for secure credential storage:"
  brew_install "git-credential-libsecret"

  git config --global credential.helper "libsecret" >>"$LOG_FILE"
  echo "${green_check} Configured Git to use credential helper \"libsecret\""

  if printf 'protocol=https\nhost=git.act3-ace.com\nusername=%s\npassword=%s\n' "$USERNAME" "$TOKEN" | "$BREW_BIN/git-credential-libsecret" store >>"$LOG_FILE"; then
    echo "${green_check} Stored Git HTTPS credentials for \"git.act3-ace.com\""
  else
    echo "${yellow_excl} Could not store Git HTTPS credentials"
  fi
elif [[ "$OSTYPE" == "darwin"* ]]; then
  if [[ $(command -v git) != "/usr/bin/git" ]]; then
    echo "${yellow_excl} Alternate installation of Git detected, skipping macOS Keychain setup for Git"
    echo -e "\t${yellow}ACT3 recommends \"/usr/bin/git\" for macOS. Uninstall all other versions of Git and rerun ACT3 Login to set up secure credential storage with the macOS Keychain.${normal}"
    if brew list git; then
      echo -e "\t${yellow}Found Homebrew-installed Git, uninstall with \"brew uninstall git\"${normal}"
    else
      echo -e "\t${yellow}Found alternate Git installation \"$(command -v git)\"${normal}"
    fi
  else
    # I think MacOS comes with this pre-installed or it's part of git?
    git config --global credential.helper "osxkeychain" >>"$LOG_FILE"
    echo "${green_check} Configured Git to use credential helper \"osxkeychain\""

    if printf 'protocol=https\nhost=git.act3-ace.com\nusername=%s\npassword=%s\n' "$USERNAME" "$TOKEN" | git credential-osxkeychain store >>"$LOG_FILE"; then
      echo "${green_check} Stored Git HTTPS credentials for \"git.act3-ace.com\""
    else
      echo "${yellow_excl} Could not store Git HTTPS credentials"
    fi
  fi
fi

# GITLAB CONTAINER REGISTRY CREDENTIALS
echo -e "\n${bold}Setting up credentials for the ACT3 GitLab Container Registry${normal}"

# Use yq to add credsStore field to ~/.docker/config.json
# Use crane to log in to reg.git.act3-ace.com (crane checks login success)
if [ "$IS_WSL" != true ]; then
  echo -e "Installing docker-credential-helper for secure credential storage:"
  brew_install "docker-credential-helper"

  CREDS_STORE="secretservice"
  if [[ "$OSTYPE" == "darwin"* ]]; then
    CREDS_STORE="osxkeychain"
  fi

  mkdir -p "$HOME/.docker"
  touch -a "$HOME/.docker/config.json" # -a tells touch to only change the "access" and "change" times
  "$BREW_BIN"/yq e -i -o=json ".credsStore = \"$CREDS_STORE\"" "$HOME/.docker/config.json"
  "$BREW_BIN"/yq e -i -o=json ".credHelpers.\"reg.git.act3-ace.com\" = \"$CREDS_STORE\"" "$HOME/.docker/config.json"
  echo "${green_check} Configured registry authentication to use \"$CREDS_STORE\" ($HOME/.docker/config.json)"
fi

if printf '%s\n' "$TOKEN" | "$BREW_BIN"/crane auth login reg.git.act3-ace.com -u "$USERNAME" --password-stdin >>"$LOG_FILE"; then
  echo "${green_check} Logged into the ACT3 GitLab Container Registry (reg.git.act3-ace.com)"
else
  echo "${red_x}${red} Couldn't log into reg.git.act3-ace.com, check logs.${normal}"
  echo "Aborting."
  exit 1
fi
# ACE TOOLS HOMEBREW TAP
echo -e "\n${bold}NETRC Creation (for Go development)${normal}"

create_netrc() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    cat <<EOF >"$HOME/.netrc"
machine git.act3-ace.com
  login $USERNAME
  password $TOKEN
EOF
    chmod 600 "$HOME/.netrc"
    echo "${green_check} Created \"$HOME/.netrc\""
  else
    echo "Installing direnv:"
    brew_install "direnv"

    mkdir -p "$XDG_CONFIG_HOME/direnv"
    DIRENVRC="$XDG_CONFIG_HOME/direnv/direnvrc"
    [ -f "$DIRENVRC" ] && cp "$DIRENVRC" "$DIRENVRC.bak-$(date +%s)"
    [ -f "$DIRENVRC" ] && rm "$DIRENVRC"
    touch -a "$DIRENVRC"

    echo "export NETRC=\"$XDG_RUNTIME_DIR\"/netrc
cat <<EOF > \"\$NETRC\"
machine git.act3-ace.com
  login $USERNAME
  password \$(secret-tool lookup server git.act3-ace.com)
EOF
chmod 600 \"$NETRC\"
" >"$XDG_CONFIG_HOME/direnv/direnvrc"

    echo "${green_check} Configured NETRC to use secure credential storage. (\"$XDG_CONFIG_HOME/direnv/direnvrc\")"
    echo -e "\nTo use the NETRC credentials for a GoLang project, there are additional steps:"
    echo "1. Create a .envrc file in the project directory (can be empty)."
    echo "2. Run \"direnv allow\" in the project's directory."
    echo "3. Add the ACT3 GitLab to your GOPRIVATE (the following command will overwrite existing GOPRIVATE):
  go env -w GOPRIVATE git.act3-ace.com"
    echo "Add \".envrc\" to your global .gitignore to avoid committing the file."
  fi
}

read -r -p "Do you wish to set up a .netrc file? (y/n)>" yn
case $yn in
[Yy]*) create_netrc ;;
*) echo "Skipping NETRC creation" ;;
esac

# ACE TOOLS HOMEBREW TAP
echo -e "\n${bold}Setting up the ACE Tools Homebrew Tap${normal}"

# Tap act3/ace-tools if not already tapped
echo "Checking for the act3/ace-tools Homebrew Tap..."
[[ $(brew tap) =~ "act3/ace-tools" ]] || {
  echo -e "Adding the act3/ace-tools Homebrew Tap"
  brew tap act3/ace-tools git@git.act3-ace.com:ace/homebrew-ace-tools.git >>"$LOG_FILE"
}
echo -e "${green_check} Added the act3/ace-tools Tap, check available formulae with \"brew search act3/ace-tools\""

# Upgrade Homebrew Formulae again now that we are authenticated to the ACT3 Homebrew Tap
echo "Upgrading ACT3 Homebrew Formulae:"

echo -e "\tRunning brew update..."
brew update >>"$LOG_FILE" 2>&1 || echo -e "\t${yellow}Error: \"brew update\" failed${normal}"

# act3_dependencies=("ace-tools" "act3-pt" "act3-pt-beta" "ace-dt" "ace-kubectl-plugins" "ace-helm-plugins")
brew_upgrade "ace-tools"
# TODO: standardize on where installs/updates should go
# brew_upgrade "act3-pt"
# brew_upgrade "act3-pt-beta"
brew_upgrade "ace-dt"
brew_upgrade "ace-kubectl-plugins"
brew_upgrade "ace-helm-plugins"

# GITLAB API CREDENTIALS FOR PROJECT TOOL
echo -e "\n${bold}Setting up GitLab API Credentials for ACT3 Project Tool (act3-pt)${normal}"
if [ "$IS_WSL" = true ]; then
  echo -e "${yellow}Add the following line to your \".bashrc\" file to authenticate act3-pt:\n${normal}export ACT3_PT_TOKEN=\"${TOKEN}\""
else
  # Install act3-pt and log in to git.act3-ace.com
  echo "Installing act3-pt to login:"
  if brew list act3-pt-beta >>"$LOG_FILE" 2>&1; then
    brew_upgrade "act3-pt-beta" # upgrade beta if it is installed
  else
    brew_install "act3-pt" # install normally otherwise
  fi

  printf '%s\n' "$TOKEN" | "$BREW_BIN"/act3-pt login --name act3 --url git.act3-ace.com --token-stdin >>"$LOG_FILE"
  echo "${green_check} Authenticated act3-pt for the ACT3 GitLab"
fi

# TELEMETRY SERVER SETUP FOR ACE-DT
echo -e "\n${bold}Setting up Telemetry Server for ACE Data Tool (ace-dt)${normal}"
ACE_DT_CONFIG="${ACE_DT_CONFIG:-$XDG_CONFIG_HOME/ace/dt/config.yaml}"
mkdir -p "$(dirname "$ACE_DT_CONFIG")"
touch -a "$ACE_DT_CONFIG"
if [ -s "$ACE_DT_CONFIG" ]; then
  echo "${green_check} Leaving existing ace-dt configuration file unchanged"
else
  cat <<EOF >"$ACE_DT_CONFIG"
# ACE Data Tool Configuration
apiVersion: config.dt.act3-ace.io/v1alpha1
kind: Configuration

# CachePruneMax is the maximum cache size after pruning
# cachePruneMax: 500Mi

# CachePath is the directory where the cache fields are stored
# cachePath:

# CompressionLevel is the level used for compression.  Valid values are min, normal, max
# compressionLevel: normal

# ChunkSize is the maximum size of a chunk used to upload blobs. 0 disables chunking
# chunkSize: 100Mi

# ConcurrentHTTP is the maximum number of HTTP requests that will be in flight at any given time. Must be positive.
# concurrentHTTP: 25

# RegistryAuthFile is the file to use for credentials to an OCI registry.  Defaults to ~/.docker/config.json
# registryAuthFile: ~/.docker/config.json

# Telemetry configuration
telemetry:
- name: lion
  url: https://telemetry.lion.act3-ace.ai
telemetryUserName: $USERNAME
EOF
  echo "${green_check} Created ace-dt configuration file with telemetry server configuration"
  echo "${green_check} Configured Telemetry server integration"
fi

# ACE HUB USER CONFIGURATION
echo -e "\n${bold}Creating ACE Hub User Configuration file${normal}"

# TODO: encrypt this or just post it to ACE Hub

ACE_HUB_USER_FILE="$HOME/Downloads/ace/hub/act3.json"

[ -f "$ACE_HUB_USER_FILE" ] && rm "$ACE_HUB_USER_FILE"
mkdir -p "$HOME/Downloads/ace/hub" && touch "$ACE_HUB_USER_FILE"

encoded=$(echo -n "$USERNAME:$TOKEN" | base64)
cat <<EOF >"$ACE_HUB_USER_FILE"
{
	"env": {},
	"envFiles": {
		"NETRC": "machine git.act3-ace.com\n  login $USERNAME\n  password $TOKEN",
		"REGISTRY_AUTH_FILE": "{\n  \"auths\": {\n    \"reg.git.act3-ace.com\": {\n      \"auth\": \"$encoded\"\n    }\n  }\n}",
		"ACE_DT_TELEMETRY_USERNAME": "$USERNAME"
	},
	"ips": {
		"act3": {
			"registry": "reg.git.act3-ace.com",
			"username": "$USERNAME",
			"password": "$TOKEN"
		}
	},
	"userLaunchTemplates": {}
}
EOF
echo "${green_check} Created ACE Hub user configuration file ${bold}\"$ACE_HUB_USER_FILE\"${normal}"
echo "${yellow_excl}${yellow} This file must be imported to ACE Hub to use your credentials.${normal}"

# CLUSTER ACCESS CONFIGURATION
echo -e "\n${bold}Set up ACT3 Kubernetes cluster access${normal}"

setup_cluster_access() {
  echo -e "Installing Kubectl dependencies:"
  brew_install "kubectl"
  brew_install "krew"
  { "$BREW_BIN"/kubectl-krew update >>"$LOG_FILE" 2>&1 && echo -e "\t${green_check} Updated krew plugin index"; } || echo -e "\t${yellow_excl} Couldn't update krew plugin index"

  if command -v kubectl-oidc_login >/dev/null 2>&1; then
    "$BREW_BIN"/kubectl-krew upgrade oidc-login >>"$LOG_FILE" 2>&1 || echo -e "\t${green_check} Kubectl plugin oidc-login up-to-date"
  else
    "$BREW_BIN"/kubectl-krew install oidc-login >>"$LOG_FILE" 2>&1
    echo -e "\t${green_check} Installed oidc-login Kubectl plugin"
  fi

  CLUSTERCONFIG="$HOME/.kube/act3.yaml"

  # Make sure file exists
  mkdir -p "$HOME/.kube"
  chmod 700 "$HOME/.kube" # permissions for only user read/write
  touch -a "$CLUSTERCONFIG"
  chmod 700 "$CLUSTERCONFIG" # permissions for only user read/write
  [ -f "$HOME/.kube/config" ] && chmod 700 "$HOME/.kube/config"

  # Write to it
  cat <<EOF >"$CLUSTERCONFIG"
# Cluster config sourced from https://git.act3-ace.com/www/www.git.act3-ace.com/-/blob/master/docs/resources/kubernetes.md
kind: Config
apiVersion: v1
clusters:
- cluster:
    server: https://k8s.ace.act3.ai
  name: lion-public
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlakNDQVIrZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWtNU0l3SUFZRFZRUUREQmx5YTJVeUxYTmwKY25abGNpMWpZVUF4TmpReU56YzJOamMwTUI0WERUSXlNREV5TVRFME5URXhORm9YRFRNeU1ERXhPVEUwTlRFeApORm93SkRFaU1DQUdBMVVFQXd3WmNtdGxNaTF6WlhKMlpYSXRZMkZBTVRZME1qYzNOalkzTkRCWk1CTUdCeXFHClNNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJMRDRDdkRFVHYwL3VVdUJjUlV1MDcvN3RGMTBVTU9TOWlWa1FrekIKSGg1ai9jak4vUThNM2pycTRYVWttR2VhVG9QalhrZjQ0MjNVRzV3cGM5V3NjdFdqUWpCQU1BNEdBMVVkRHdFQgovd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUWxKNy8wY2k2VzBKODJLd2NwCjhqMW96Vk5WampBS0JnZ3Foa2pPUFFRREFnTkpBREJHQWlFQTdXTy9NRXlMYnJ6Z2ZacDRRdkx5RzltSjNrMGkKeDFxRFlWSUNWQnYrbG1vQ0lRRExMN3R4UFA1SDB0bndvVW1JTy8xOEtjVUI3MzZOanh3eDB4WnNPeEYzMWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
    server: https://lion-ctl.act3-ace.ai:6443
  name: lion
- cluster:
    certificate-authority-data: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJlRENDQVIrZ0F3SUJBZ0lCQURBS0JnZ3Foa2pPUFFRREFqQWtNU0l3SUFZRFZRUUREQmx5YTJVeUxYTmwKY25abGNpMWpZVUF4TmpjeU56YzROVGcyTUI0WERUSXpNREV3TXpJd05ETXdObG9YRFRNeU1USXpNVEl3TkRNdwpObG93SkRFaU1DQUdBMVVFQXd3WmNtdGxNaTF6WlhKMlpYSXRZMkZBTVRZM01qYzNPRFU0TmpCWk1CTUdCeXFHClNNNDlBZ0VHQ0NxR1NNNDlBd0VIQTBJQUJHeUVGN05XVnZUUGt1eHFDREEydlRhZWg4c3crRTZ3V2tCUTFzSysKZzhDSDluVFpIRnUzTm56a3NjOHV5QkhRTnhtZ2JZMGhLY3EyZFJrTjJHbUxBeEtqUWpCQU1BNEdBMVVkRHdFQgovd1FFQXdJQ3BEQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRV0JCUVZIZmViaHhGZmNFUlhWY2dDCmJ0S2ZkSnl1b1RBS0JnZ3Foa2pPUFFRREFnTkhBREJFQWlCQ0FMb3YyRUptZENJdjZHajNKc2Q1aWtYZmNHMXkKWGo0aFlTeGpPVzFSZWdJZ2ZDczVFZU00a1JIcXpYWkxsMG95Z250SitrelhzOGFEaFdSa09GakE0VmM9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
    server: https://meerkat-ctl.act3-ace.ai:6443
  name: meerkat
users:
- name: gitlab-oidc
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1beta1
      args:
      - oidc-login
      - get-token
      - --oidc-issuer-url=https://git.act3-ace.com
      - --oidc-client-id=f784af5244e3f5875d932f99a82b0c4147b17fa656e58e0e1acaea3621db2c33
      command: kubectl
      env: null
      provideClusterInfo: false
contexts:
- context:
    cluster: lion-public
    user: gitlab-oidc
  name: lion
- context:
    cluster: meerkat
    user: gitlab-oidc
  name: meerkat
current-context: lion
EOF
  echo -e "${green_check} Created cluster configuration file ${bold}\"$CLUSTERCONFIG\"${normal}"

  if [ -f "$HOME/.kube/config" ]; then
    backup="$HOME/.kube/config.bak-$(date +%s)"
    cp "$HOME/.kube/config" "$backup"
    echo "${green_check} Backed up existing configuration to \"$backup\""
  fi

  KUBECONFIG=~/.kube/config:"$CLUSTERCONFIG" "$BREW_BIN"/kubectl config view --raw >~/.kube/config.new && cp ~/.kube/config.new ~/.kube/config
  echo "${green_check} Merged cluster configuration into \"$HOME/.kube/config\"."

  echo "Creating secret in namespace $USERNAME-workspace:"

  if output=$(kubectl create secret docker-registry act3 --docker-server reg.git.act3-ace.com --docker-username "$USERNAME" --docker-password "$TOKEN" -n "$USERNAME-workspace" --context lion 2>&1); then
    echo "${green_check} $output"
  else
    if [[ "$output" == *"already exists"* ]]; then
      echo "${green_check} Secret already exists"
    else
      echo "${yellow_excl}${yellow} WARNING: Could not create secret, you may have to request to be added to \"ace-project\"${normal}"
    fi
  fi
}

echo "Existing cluster configuration will be backed up before creating a new config file."
read -r -p "Do you wish to proceed?
(y/n)>" yn
case $yn in
[Yy]*) setup_cluster_access || : ;; # don't fail here
*) echo "Skipping cluster access setup" ;;
esac

echo -e "\n${bold}${green}Success!${normal}"
